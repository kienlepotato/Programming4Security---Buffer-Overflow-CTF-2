//Step. 1 UPDATE

If you have a problem with these instructions and apt failing because of keys. 

sudo wget https://archive.kali.org/archive-key.asc -O /etc/apt/trusted.gpg.d/kali-archive-keyring.asc

If you have a missing public key replace F6BC with the key you need:

sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys F6BC

//Step 2. Install GCC libraries 
sudo apt install gcc-multilib

//Step 3. Disable ASLR
sudo sysctl -w kernel.randomize_va_space=0


//Step 3. Make the vulnnerable application

//Step3.1 Enter this command in command prompt to create a C script:
nano winner.c

//Step 3.2 Copy+Paste the following code into the window:
---
#include <stdio.h>
#include <string.h>
int main (int argc, char** argv){
 //Make a buffer make this bigger than the minimum you will need
 //You will want to make this large enough to fit shell code and lots of nops
 char buffer[500];
 //copy cmdline input into the buffer.
 strcpy(buffer, argv[1]);
 //return 0 because that is what we do if stuff exits normally.
 return 0;
}
---

//Step 3.3 Compile the bad code into a vulnerable application by using the command:
gcc -m32 -fno-stack-protector -z exec -no-pie -g -Wno-implicit-function-declaration winner.c -o winner

//Step 4. Run the vulnerable application with GDB debugger by entering the command:
gdb./winner

//Step 5. Observe Assembly Dump of vulnerable application's 'Main' in GDB by using the command:
disass main

//Step 5.1 Keep note of the memory location of the 'strcpy' line. For me it was: 0x080491a1.

//Step 5.2 Place a breakpoint at this location in GDB by using the commmand:
b 0x080491a1

//

